<?php
/**
 * AdJsonldAdWrite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * AdJsonldAdWrite Class Doc Comment
 *
 * @category Class
 * @description An ad is the full description of a product that an advertiser want to sell. Any ad is owned by one specific advertiser.
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdJsonldAdWrite implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ad.jsonld-ad.write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'OneOfAdJsonldAdWriteContext',
        'id' => 'string',
        'type' => 'string',
        'advertiser' => '\Ubiflow\Model\AdvertiserJsonldAdWrite',
        'reference' => 'string',
        'source' => '\Ubiflow\Model\AdSourceJsonldAdWrite',
        'inputAt' => '\DateTime',
        'status' => 'string',
        'transaction' => '\Ubiflow\Model\TransactionJsonldAdWrite',
        'productType' => '\Ubiflow\Model\ProductTypeJsonldAdWrite',
        'title' => 'string',
        'description' => 'string',
        'descriptionEnglish' => 'string',
        'data' => '\Ubiflow\Model\AdDataJsonldAdWrite[]',
        'mediaSupports' => '\Ubiflow\Model\MediaSupportsJsonldAdWrite',
        'parentAd' => '\Ubiflow\Model\RelatedAdJsonldAdWrite',
        'adPublications' => 'AnyOfAdJsonldAdWriteAdPublications'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
        'id' => null,
        'type' => null,
        'advertiser' => null,
        'reference' => null,
        'source' => null,
        'inputAt' => 'date-time',
        'status' => null,
        'transaction' => null,
        'productType' => null,
        'title' => null,
        'description' => null,
        'descriptionEnglish' => null,
        'data' => null,
        'mediaSupports' => null,
        'parentAd' => null,
        'adPublications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
        'id' => '@id',
        'type' => '@type',
        'advertiser' => 'advertiser',
        'reference' => 'reference',
        'source' => 'source',
        'inputAt' => 'inputAt',
        'status' => 'status',
        'transaction' => 'transaction',
        'productType' => 'productType',
        'title' => 'title',
        'description' => 'description',
        'descriptionEnglish' => 'descriptionEnglish',
        'data' => 'data',
        'mediaSupports' => 'mediaSupports',
        'parentAd' => 'parentAd',
        'adPublications' => 'adPublications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
        'id' => 'setId',
        'type' => 'setType',
        'advertiser' => 'setAdvertiser',
        'reference' => 'setReference',
        'source' => 'setSource',
        'inputAt' => 'setInputAt',
        'status' => 'setStatus',
        'transaction' => 'setTransaction',
        'productType' => 'setProductType',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'descriptionEnglish' => 'setDescriptionEnglish',
        'data' => 'setData',
        'mediaSupports' => 'setMediaSupports',
        'parentAd' => 'setParentAd',
        'adPublications' => 'setAdPublications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
        'id' => 'getId',
        'type' => 'getType',
        'advertiser' => 'getAdvertiser',
        'reference' => 'getReference',
        'source' => 'getSource',
        'inputAt' => 'getInputAt',
        'status' => 'getStatus',
        'transaction' => 'getTransaction',
        'productType' => 'getProductType',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'descriptionEnglish' => 'getDescriptionEnglish',
        'data' => 'getData',
        'mediaSupports' => 'getMediaSupports',
        'parentAd' => 'getParentAd',
        'adPublications' => 'getAdPublications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_B = 'B';
    const STATUS_A = 'A';
    const STATUS_V = 'V';
    const STATUS_S = 'S';
    const STATUS_M = 'M';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_B,
            self::STATUS_A,
            self::STATUS_V,
            self::STATUS_S,
            self::STATUS_M,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['advertiser'] = isset($data['advertiser']) ? $data['advertiser'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['inputAt'] = isset($data['inputAt']) ? $data['inputAt'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['productType'] = isset($data['productType']) ? $data['productType'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptionEnglish'] = isset($data['descriptionEnglish']) ? $data['descriptionEnglish'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['mediaSupports'] = isset($data['mediaSupports']) ? $data['mediaSupports'] : null;
        $this->container['parentAd'] = isset($data['parentAd']) ? $data['parentAd'] : null;
        $this->container['adPublications'] = isset($data['adPublications']) ? $data['adPublications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['advertiser'] === null) {
            $invalidProperties[] = "'advertiser' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction'] === null) {
            $invalidProperties[] = "'transaction' can't be null";
        }
        if ($this->container['productType'] === null) {
            $invalidProperties[] = "'productType' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return OneOfAdJsonldAdWriteContext
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param OneOfAdJsonldAdWriteContext $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets advertiser
     *
     * @return \Ubiflow\Model\AdvertiserJsonldAdWrite
     */
    public function getAdvertiser()
    {
        return $this->container['advertiser'];
    }

    /**
     * Sets advertiser
     *
     * @param \Ubiflow\Model\AdvertiserJsonldAdWrite $advertiser advertiser
     *
     * @return $this
     */
    public function setAdvertiser($advertiser)
    {
        $this->container['advertiser'] = $advertiser;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The unique identifier of the ad, from the point of vue of the advertiser owning the ad. This string is unique for a given advertiser.  The reference is an identifier used by all parties : the advertiser, the software editor, web portals. That is why once an ad has been created with a given reference, this reference cannot be modified anymore.  This string should not contain any character forbidden in file systems or urls. The reference originally given when the ad is created may thus be modified by Ubiflow : unsupported characters are replaced by un underscore (\"_\"). But in such cases you can still use the original reference when updating an ad.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Ubiflow\Model\AdSourceJsonldAdWrite
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Ubiflow\Model\AdSourceJsonldAdWrite $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets inputAt
     *
     * @return \DateTime
     */
    public function getInputAt()
    {
        return $this->container['inputAt'];
    }

    /**
     * Sets inputAt
     *
     * @param \DateTime $inputAt The date the ad was created by the advertiser (input for the first time) in the software he uses.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setInputAt($inputAt)
    {
        $this->container['inputAt'] = $inputAt;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the ad.  Available status are :  - \"B\" : The ad has been created, but is not yet activated :       it is currently used by the advertiser,      but it may not be published on web portals as long as it is not activated.  - \"A\" : The ad is active :       it is currently used by the advertiser, and may be published on web portals.       This state is the most commonly used for ads.  - \"V\" : The product of the ad has been sold, but the ad is still active,       because the advertiser wants to communicate on the products he sold.       The ad may be published, but only on web portals who allow such ads.  - \"S\" : The ad has been deleted by the advertiser.       It will be removed from Ubiflow SI over the next few days.  - \"M\" : The ad is a model of ads :       a sort of ad which contains generic data common to many other ads.       It may not be published on web portals.       A model ad may be used by an advertiser who sells products which are very similar,      and differ by only few characteristics.       Example in the real estate universe :      a builder of detached houses sells many houses which are almost all identical.       Example in the vehicles universe :      a car dealer sells cars which are almost all identical (the color or a few options may differ).       In practice, such ads are created by advertisers who don't use any software,      but use data entry directly on Ubiflow's platform :      model ads enable them to gain some precious time.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \Ubiflow\Model\TransactionJsonldAdWrite
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \Ubiflow\Model\TransactionJsonldAdWrite $transaction transaction
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return \Ubiflow\Model\ProductTypeJsonldAdWrite
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param \Ubiflow\Model\ProductTypeJsonldAdWrite $productType productType
     *
     * @return $this
     */
    public function setProductType($productType)
    {
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the ad (very short description), in the language of the advertiser.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The full description of the ad, in the language of the advertiser.  The description is a text comment describing the product which should be sold thanks to the ad.  This property is required in the \"IMMO\" universe (\"Real estate\").
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionEnglish
     *
     * @return string
     */
    public function getDescriptionEnglish()
    {
        return $this->container['descriptionEnglish'];
    }

    /**
     * Sets descriptionEnglish
     *
     * @param string $descriptionEnglish The full description in english of the ad.  The description in english is a text comment describing the product which should be sold thanks to the ad.
     *
     * @return $this
     */
    public function setDescriptionEnglish($descriptionEnglish)
    {
        $this->container['descriptionEnglish'] = $descriptionEnglish;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \Ubiflow\Model\AdDataJsonldAdWrite[]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \Ubiflow\Model\AdDataJsonldAdWrite[] $data The collection of all data describing the ad.
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets mediaSupports
     *
     * @return \Ubiflow\Model\MediaSupportsJsonldAdWrite
     */
    public function getMediaSupports()
    {
        return $this->container['mediaSupports'];
    }

    /**
     * Sets mediaSupports
     *
     * @param \Ubiflow\Model\MediaSupportsJsonldAdWrite $mediaSupports mediaSupports
     *
     * @return $this
     */
    public function setMediaSupports($mediaSupports)
    {
        $this->container['mediaSupports'] = $mediaSupports;

        return $this;
    }

    /**
     * Gets parentAd
     *
     * @return \Ubiflow\Model\RelatedAdJsonldAdWrite
     */
    public function getParentAd()
    {
        return $this->container['parentAd'];
    }

    /**
     * Sets parentAd
     *
     * @param \Ubiflow\Model\RelatedAdJsonldAdWrite $parentAd parentAd
     *
     * @return $this
     */
    public function setParentAd($parentAd)
    {
        $this->container['parentAd'] = $parentAd;

        return $this;
    }

    /**
     * Gets adPublications
     *
     * @return AnyOfAdJsonldAdWriteAdPublications
     */
    public function getAdPublications()
    {
        return $this->container['adPublications'];
    }

    /**
     * Sets adPublications
     *
     * @param AnyOfAdJsonldAdWriteAdPublications $adPublications The collection of AdPublication of the ad on portals.  The aim of this write only property is to enable to update the selection of an ad on all portals at the same time you update the Ad. If you wish to only update the selection of an ad on all (or some) portals, please use the AdPublications resource instead.  This property is optional:  - when set to null, the selection of the ad will not be updated for any portal. - when set to an array, the selection of the ad on ALL portals will be updated according to the array.    Especially:   - when set to an empty array, the ad will be unselected to be unpublished on all portals;   - when a portal is not in the array, the ad will be unselected to be unpublished on this portal.   - when a portal is in the array, the ad will be selected to be published on this portal.  The specific portal code \"BOUQUET_GRATUITS\" may be transmitted to select the ad on all free portals.
     *
     * @return $this
     */
    public function setAdPublications($adPublications)
    {
        $this->container['adPublications'] = $adPublications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
