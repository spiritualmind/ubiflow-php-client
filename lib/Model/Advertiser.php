<?php
/**
 * Advertiser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * Advertiser Class Doc Comment
 *
 * @category Class
 * @description An advertiser is a company or member of a company identified by a physical address / point of sale. &lt;br&gt; In real estate it will be an agency or developer and in automotive a dealer. &lt;br&gt; If a company has several points of sale, it is necessary to have one advertiser for each point of sale that wants to publish its ads on portals.
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Advertiser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Advertiser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'universeCode' => 'string',
        'professionCode' => 'string',
        'profession' => 'string',
        'commercialName' => 'string',
        'socialReason' => 'string',
        'siret' => 'string',
        'email' => 'string',
        'webSite' => 'string',
        'phone' => 'string',
        'address' => 'string',
        'zipCode' => 'string',
        'city' => 'string',
        'country' => 'string',
        'urlAutomaticConnectionToCustomerSpace' => 'string',
        'externalServiceCode' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'universeCode' => null,
        'professionCode' => null,
        'profession' => 'iri-reference',
        'commercialName' => null,
        'socialReason' => null,
        'siret' => null,
        'email' => null,
        'webSite' => null,
        'phone' => null,
        'address' => null,
        'zipCode' => null,
        'city' => null,
        'country' => null,
        'urlAutomaticConnectionToCustomerSpace' => null,
        'externalServiceCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'universeCode' => 'universeCode',
        'professionCode' => 'professionCode',
        'profession' => 'profession',
        'commercialName' => 'commercialName',
        'socialReason' => 'socialReason',
        'siret' => 'siret',
        'email' => 'email',
        'webSite' => 'webSite',
        'phone' => 'phone',
        'address' => 'address',
        'zipCode' => 'zipCode',
        'city' => 'city',
        'country' => 'country',
        'urlAutomaticConnectionToCustomerSpace' => 'urlAutomaticConnectionToCustomerSpace',
        'externalServiceCode' => 'externalServiceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'universeCode' => 'setUniverseCode',
        'professionCode' => 'setProfessionCode',
        'profession' => 'setProfession',
        'commercialName' => 'setCommercialName',
        'socialReason' => 'setSocialReason',
        'siret' => 'setSiret',
        'email' => 'setEmail',
        'webSite' => 'setWebSite',
        'phone' => 'setPhone',
        'address' => 'setAddress',
        'zipCode' => 'setZipCode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'urlAutomaticConnectionToCustomerSpace' => 'setUrlAutomaticConnectionToCustomerSpace',
        'externalServiceCode' => 'setExternalServiceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'universeCode' => 'getUniverseCode',
        'professionCode' => 'getProfessionCode',
        'profession' => 'getProfession',
        'commercialName' => 'getCommercialName',
        'socialReason' => 'getSocialReason',
        'siret' => 'getSiret',
        'email' => 'getEmail',
        'webSite' => 'getWebSite',
        'phone' => 'getPhone',
        'address' => 'getAddress',
        'zipCode' => 'getZipCode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'urlAutomaticConnectionToCustomerSpace' => 'getUrlAutomaticConnectionToCustomerSpace',
        'externalServiceCode' => 'getExternalServiceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['universeCode'] = isset($data['universeCode']) ? $data['universeCode'] : null;
        $this->container['professionCode'] = isset($data['professionCode']) ? $data['professionCode'] : null;
        $this->container['profession'] = isset($data['profession']) ? $data['profession'] : null;
        $this->container['commercialName'] = isset($data['commercialName']) ? $data['commercialName'] : null;
        $this->container['socialReason'] = isset($data['socialReason']) ? $data['socialReason'] : null;
        $this->container['siret'] = isset($data['siret']) ? $data['siret'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['webSite'] = isset($data['webSite']) ? $data['webSite'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['zipCode'] = isset($data['zipCode']) ? $data['zipCode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['urlAutomaticConnectionToCustomerSpace'] = isset($data['urlAutomaticConnectionToCustomerSpace']) ? $data['urlAutomaticConnectionToCustomerSpace'] : null;
        $this->container['externalServiceCode'] = isset($data['externalServiceCode']) ? $data['externalServiceCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier for an advertiser, in the Ubiflow IS.  Neither the id nor the code are mandatory when creating or updating an ad. But at least one of the two properties must be set.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The unique code for an advertiser, in the Ubiflow IS.  Typically the string \"ag\" followed by 6 or 7 numbers.  Neither the id nor the code are mandatory when creating or updating an ad. But at least one of the two properties must be set.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets universeCode
     *
     * @return string
     */
    public function getUniverseCode()
    {
        return $this->container['universeCode'];
    }

    /**
     * Sets universeCode
     *
     * @param string $universeCode The identifier (code name) of the universe for an advertiser.  The list of all identifiers may be retrieved through the Universe resource.
     *
     * @return $this
     */
    public function setUniverseCode($universeCode)
    {
        $this->container['universeCode'] = $universeCode;

        return $this;
    }

    /**
     * Gets professionCode
     *
     * @return string
     */
    public function getProfessionCode()
    {
        return $this->container['professionCode'];
    }

    /**
     * Sets professionCode
     *
     * @param string $professionCode The identifier (code name) of the profession practiced by an advertiser.  The list of all identifiers may be retrieved through the Profession resource.
     *
     * @return $this
     */
    public function setProfessionCode($professionCode)
    {
        $this->container['professionCode'] = $professionCode;

        return $this;
    }

    /**
     * Gets profession
     *
     * @return string
     */
    public function getProfession()
    {
        return $this->container['profession'];
    }

    /**
     * Sets profession
     *
     * @param string $profession The profession of the advertiser.
     *
     * @return $this
     */
    public function setProfession($profession)
    {
        $this->container['profession'] = $profession;

        return $this;
    }

    /**
     * Gets commercialName
     *
     * @return string
     */
    public function getCommercialName()
    {
        return $this->container['commercialName'];
    }

    /**
     * Sets commercialName
     *
     * @param string $commercialName The commercial name.
     *
     * @return $this
     */
    public function setCommercialName($commercialName)
    {
        $this->container['commercialName'] = $commercialName;

        return $this;
    }

    /**
     * Gets socialReason
     *
     * @return string
     */
    public function getSocialReason()
    {
        return $this->container['socialReason'];
    }

    /**
     * Sets socialReason
     *
     * @param string $socialReason The social reason (company name).
     *
     * @return $this
     */
    public function setSocialReason($socialReason)
    {
        $this->container['socialReason'] = $socialReason;

        return $this;
    }

    /**
     * Gets siret
     *
     * @return string
     */
    public function getSiret()
    {
        return $this->container['siret'];
    }

    /**
     * Sets siret
     *
     * @param string $siret the siret.
     *
     * @return $this
     */
    public function setSiret($siret)
    {
        $this->container['siret'] = $siret;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets webSite
     *
     * @return string
     */
    public function getWebSite()
    {
        return $this->container['webSite'];
    }

    /**
     * Sets webSite
     *
     * @param string $webSite The web site.
     *
     * @return $this
     */
    public function setWebSite($webSite)
    {
        $this->container['webSite'] = $webSite;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The phone.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string $zipCode The zip code.
     *
     * @return $this
     */
    public function setZipCode($zipCode)
    {
        $this->container['zipCode'] = $zipCode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets urlAutomaticConnectionToCustomerSpace
     *
     * @return string
     */
    public function getUrlAutomaticConnectionToCustomerSpace()
    {
        return $this->container['urlAutomaticConnectionToCustomerSpace'];
    }

    /**
     * Sets urlAutomaticConnectionToCustomerSpace
     *
     * @param string $urlAutomaticConnectionToCustomerSpace The automatic url of connection to the space customer of the advertiser.  By default, this url is visible only for an advertiser. For other types of users, it is visible for users who have asked it to Ubiflow.
     *
     * @return $this
     */
    public function setUrlAutomaticConnectionToCustomerSpace($urlAutomaticConnectionToCustomerSpace)
    {
        $this->container['urlAutomaticConnectionToCustomerSpace'] = $urlAutomaticConnectionToCustomerSpace;

        return $this;
    }

    /**
     * Gets externalServiceCode
     *
     * @return 
     */
    public function getExternalServiceCode()
    {
        return $this->container['externalServiceCode'];
    }

    /**
     * Sets externalServiceCode
     *
     * @param  $externalServiceCode externalServiceCode
     *
     * @return $this
     */
    public function setExternalServiceCode($externalServiceCode)
    {
        $this->container['externalServiceCode'] = $externalServiceCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
