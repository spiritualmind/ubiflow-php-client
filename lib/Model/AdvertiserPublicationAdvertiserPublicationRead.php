<?php
/**
 * AdvertiserPublicationAdvertiserPublicationRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * AdvertiserPublicationAdvertiserPublicationRead Class Doc Comment
 *
 * @category Class
 * @description An AdvertiserPublication represents the current publication configuration of an advertiser for a portal.
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvertiserPublicationAdvertiserPublicationRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvertiserPublication-advertiser_publication.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'advertiser' => '\Ubiflow\Model\AdvertiserAdvertiserPublicationRead',
        'portal' => '\Ubiflow\Model\PortalAdvertiserPublicationRead',
        'createdAt' => '\DateTime',
        'active' => 'bool',
        'maxNumberOfAds' => 'int',
        'adsSelectionConfiguration' => 'string',
        'lastPublicationDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'advertiser' => null,
        'portal' => null,
        'createdAt' => 'date-time',
        'active' => null,
        'maxNumberOfAds' => null,
        'adsSelectionConfiguration' => null,
        'lastPublicationDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'advertiser' => 'advertiser',
        'portal' => 'portal',
        'createdAt' => 'createdAt',
        'active' => 'active',
        'maxNumberOfAds' => 'maxNumberOfAds',
        'adsSelectionConfiguration' => 'adsSelectionConfiguration',
        'lastPublicationDate' => 'lastPublicationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'advertiser' => 'setAdvertiser',
        'portal' => 'setPortal',
        'createdAt' => 'setCreatedAt',
        'active' => 'setActive',
        'maxNumberOfAds' => 'setMaxNumberOfAds',
        'adsSelectionConfiguration' => 'setAdsSelectionConfiguration',
        'lastPublicationDate' => 'setLastPublicationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'advertiser' => 'getAdvertiser',
        'portal' => 'getPortal',
        'createdAt' => 'getCreatedAt',
        'active' => 'getActive',
        'maxNumberOfAds' => 'getMaxNumberOfAds',
        'adsSelectionConfiguration' => 'getAdsSelectionConfiguration',
        'lastPublicationDate' => 'getLastPublicationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADS_SELECTION_CONFIGURATION__1 = '1';
    const ADS_SELECTION_CONFIGURATION__2 = '2';
    const ADS_SELECTION_CONFIGURATION__3 = '3';
    const ADS_SELECTION_CONFIGURATION__4 = '4';
    const ADS_SELECTION_CONFIGURATION__5 = '5';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdsSelectionConfigurationAllowableValues()
    {
        return [
            self::ADS_SELECTION_CONFIGURATION__1,
            self::ADS_SELECTION_CONFIGURATION__2,
            self::ADS_SELECTION_CONFIGURATION__3,
            self::ADS_SELECTION_CONFIGURATION__4,
            self::ADS_SELECTION_CONFIGURATION__5,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['advertiser'] = isset($data['advertiser']) ? $data['advertiser'] : null;
        $this->container['portal'] = isset($data['portal']) ? $data['portal'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['maxNumberOfAds'] = isset($data['maxNumberOfAds']) ? $data['maxNumberOfAds'] : null;
        $this->container['adsSelectionConfiguration'] = isset($data['adsSelectionConfiguration']) ? $data['adsSelectionConfiguration'] : null;
        $this->container['lastPublicationDate'] = isset($data['lastPublicationDate']) ? $data['lastPublicationDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['adsSelectionConfiguration'] === null) {
            $invalidProperties[] = "'adsSelectionConfiguration' can't be null";
        }
        $allowedValues = $this->getAdsSelectionConfigurationAllowableValues();
        if (!is_null($this->container['adsSelectionConfiguration']) && !in_array($this->container['adsSelectionConfiguration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'adsSelectionConfiguration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the advertiser publication, in the Ubiflow IS.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets advertiser
     *
     * @return \Ubiflow\Model\AdvertiserAdvertiserPublicationRead
     */
    public function getAdvertiser()
    {
        return $this->container['advertiser'];
    }

    /**
     * Sets advertiser
     *
     * @param \Ubiflow\Model\AdvertiserAdvertiserPublicationRead $advertiser advertiser
     *
     * @return $this
     */
    public function setAdvertiser($advertiser)
    {
        $this->container['advertiser'] = $advertiser;

        return $this;
    }

    /**
     * Gets portal
     *
     * @return \Ubiflow\Model\PortalAdvertiserPublicationRead
     */
    public function getPortal()
    {
        return $this->container['portal'];
    }

    /**
     * Sets portal
     *
     * @param \Ubiflow\Model\PortalAdvertiserPublicationRead $portal portal
     *
     * @return $this
     */
    public function setPortal($portal)
    {
        $this->container['portal'] = $portal;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date the publication was created for the advertiser.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates weather the publication is active (ie ads may be published).
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets maxNumberOfAds
     *
     * @return int
     */
    public function getMaxNumberOfAds()
    {
        return $this->container['maxNumberOfAds'];
    }

    /**
     * Sets maxNumberOfAds
     *
     * @param int $maxNumberOfAds The quota indicating the maximum number of ads that may be published on the portal by the advertiser (null for an unlimited publication).
     *
     * @return $this
     */
    public function setMaxNumberOfAds($maxNumberOfAds)
    {
        $this->container['maxNumberOfAds'] = $maxNumberOfAds;

        return $this;
    }

    /**
     * Gets adsSelectionConfiguration
     *
     * @return string
     */
    public function getAdsSelectionConfiguration()
    {
        return $this->container['adsSelectionConfiguration'];
    }

    /**
     * Sets adsSelectionConfiguration
     *
     * @param string $adsSelectionConfiguration The way the advertiser select the ads he wants to publish on the portal.  - 1 : The advertiser makes his own manual selection of ads,       either on his customer area, or through the gateway of his software.  - 2 : The advertiser does not make any manual selection of ads :       he chose to automatically publish the maximum number of ads (regarding the quota configured),      with ads sorted by decreasing date of creation,      which is the date the ad was created in the Ubiflow IS.  - 3 : The advertiser does not make any manual selection of ads :       he chose to automatically publish the maximum number of ads (regarding the quota configured),      with ads sorted by decreasing date of input,      which is the date the ad was created by the advertiser      (input for the first time) in the software he uses.  - 4 : The advertiser does not make any manual selection of ads :       he chose to automatically publish the maximum number of ads (regarding the quota configured),      with ads sorted by decreasing date of integration,      which is the date the ad was modified for the last time in the Ubiflow IS.  - 5 : The advertiser does not make any manual selection of ads :       he chose to automatically publish the maximum number of ads (regarding the quota configured),      with ads sorted by decreasing date of mandate (in the real estate universe).
     *
     * @return $this
     */
    public function setAdsSelectionConfiguration($adsSelectionConfiguration)
    {
        $allowedValues = $this->getAdsSelectionConfigurationAllowableValues();
        if (!in_array($adsSelectionConfiguration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'adsSelectionConfiguration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adsSelectionConfiguration'] = $adsSelectionConfiguration;

        return $this;
    }

    /**
     * Gets lastPublicationDate
     *
     * @return \DateTime
     */
    public function getLastPublicationDate()
    {
        return $this->container['lastPublicationDate'];
    }

    /**
     * Sets lastPublicationDate
     *
     * @param \DateTime $lastPublicationDate The date the advertiser published ads for the last time.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setLastPublicationDate($lastPublicationDate)
    {
        $this->container['lastPublicationDate'] = $lastPublicationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
