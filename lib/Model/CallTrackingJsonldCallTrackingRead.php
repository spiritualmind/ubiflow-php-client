<?php
/**
 * CallTrackingJsonldCallTrackingRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * CallTrackingJsonldCallTrackingRead Class Doc Comment
 *
 * @category Class
 * @description It&#x27;s a Call Tracking. .
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallTrackingJsonldCallTrackingRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallTracking.jsonld-call_tracking.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'annonceur' => 'int',
        'diffuseur' => 'string',
        'trackingNumber' => 'string',
        'uuid' => 'string',
        'dateEnded' => '\DateTime',
        'dateStarted' => '\DateTime',
        'date' => '\DateTime',
        'answered' => 'bool',
        'callDuration' => 'int',
        'ringDuration' => 'int',
        'talkDuration' => 'int',
        'calledNumber' => 'string',
        'callerNumber' => 'string',
        'redirectionNumber' => 'string',
        'termination' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'annonceur' => null,
        'diffuseur' => null,
        'trackingNumber' => null,
        'uuid' => null,
        'dateEnded' => 'date-time',
        'dateStarted' => 'date-time',
        'date' => 'date-time',
        'answered' => null,
        'callDuration' => null,
        'ringDuration' => null,
        'talkDuration' => null,
        'calledNumber' => null,
        'callerNumber' => null,
        'redirectionNumber' => null,
        'termination' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => '@id',
        'type' => '@type',
        'annonceur' => 'annonceur',
        'diffuseur' => 'diffuseur',
        'trackingNumber' => 'trackingNumber',
        'uuid' => 'uuid',
        'dateEnded' => 'dateEnded',
        'dateStarted' => 'dateStarted',
        'date' => 'date',
        'answered' => 'answered',
        'callDuration' => 'callDuration',
        'ringDuration' => 'ringDuration',
        'talkDuration' => 'talkDuration',
        'calledNumber' => 'calledNumber',
        'callerNumber' => 'callerNumber',
        'redirectionNumber' => 'redirectionNumber',
        'termination' => 'termination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'annonceur' => 'setAnnonceur',
        'diffuseur' => 'setDiffuseur',
        'trackingNumber' => 'setTrackingNumber',
        'uuid' => 'setUuid',
        'dateEnded' => 'setDateEnded',
        'dateStarted' => 'setDateStarted',
        'date' => 'setDate',
        'answered' => 'setAnswered',
        'callDuration' => 'setCallDuration',
        'ringDuration' => 'setRingDuration',
        'talkDuration' => 'setTalkDuration',
        'calledNumber' => 'setCalledNumber',
        'callerNumber' => 'setCallerNumber',
        'redirectionNumber' => 'setRedirectionNumber',
        'termination' => 'setTermination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'annonceur' => 'getAnnonceur',
        'diffuseur' => 'getDiffuseur',
        'trackingNumber' => 'getTrackingNumber',
        'uuid' => 'getUuid',
        'dateEnded' => 'getDateEnded',
        'dateStarted' => 'getDateStarted',
        'date' => 'getDate',
        'answered' => 'getAnswered',
        'callDuration' => 'getCallDuration',
        'ringDuration' => 'getRingDuration',
        'talkDuration' => 'getTalkDuration',
        'calledNumber' => 'getCalledNumber',
        'callerNumber' => 'getCallerNumber',
        'redirectionNumber' => 'getRedirectionNumber',
        'termination' => 'getTermination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['annonceur'] = isset($data['annonceur']) ? $data['annonceur'] : null;
        $this->container['diffuseur'] = isset($data['diffuseur']) ? $data['diffuseur'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['dateEnded'] = isset($data['dateEnded']) ? $data['dateEnded'] : null;
        $this->container['dateStarted'] = isset($data['dateStarted']) ? $data['dateStarted'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['answered'] = isset($data['answered']) ? $data['answered'] : null;
        $this->container['callDuration'] = isset($data['callDuration']) ? $data['callDuration'] : null;
        $this->container['ringDuration'] = isset($data['ringDuration']) ? $data['ringDuration'] : null;
        $this->container['talkDuration'] = isset($data['talkDuration']) ? $data['talkDuration'] : null;
        $this->container['calledNumber'] = isset($data['calledNumber']) ? $data['calledNumber'] : null;
        $this->container['callerNumber'] = isset($data['callerNumber']) ? $data['callerNumber'] : null;
        $this->container['redirectionNumber'] = isset($data['redirectionNumber']) ? $data['redirectionNumber'] : null;
        $this->container['termination'] = isset($data['termination']) ? $data['termination'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets annonceur
     *
     * @return int
     */
    public function getAnnonceur()
    {
        return $this->container['annonceur'];
    }

    /**
     * Sets annonceur
     *
     * @param int $annonceur The advertiser.
     *
     * @return $this
     */
    public function setAnnonceur($annonceur)
    {
        $this->container['annonceur'] = $annonceur;

        return $this;
    }

    /**
     * Gets diffuseur
     *
     * @return string
     */
    public function getDiffuseur()
    {
        return $this->container['diffuseur'];
    }

    /**
     * Sets diffuseur
     *
     * @param string $diffuseur The brodcaster.
     *
     * @return $this
     */
    public function setDiffuseur($diffuseur)
    {
        $this->container['diffuseur'] = $diffuseur;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber The trackingNumber.
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid The uuid.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets dateEnded
     *
     * @return \DateTime
     */
    public function getDateEnded()
    {
        return $this->container['dateEnded'];
    }

    /**
     * Sets dateEnded
     *
     * @param \DateTime $dateEnded The dateEnded.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setDateEnded($dateEnded)
    {
        $this->container['dateEnded'] = $dateEnded;

        return $this;
    }

    /**
     * Gets dateStarted
     *
     * @return \DateTime
     */
    public function getDateStarted()
    {
        return $this->container['dateStarted'];
    }

    /**
     * Sets dateStarted
     *
     * @param \DateTime $dateStarted The dateStarted.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setDateStarted($dateStarted)
    {
        $this->container['dateStarted'] = $dateStarted;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets answered
     *
     * @return bool
     */
    public function getAnswered()
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param bool $answered the answered.
     *
     * @return $this
     */
    public function setAnswered($answered)
    {
        $this->container['answered'] = $answered;

        return $this;
    }

    /**
     * Gets callDuration
     *
     * @return int
     */
    public function getCallDuration()
    {
        return $this->container['callDuration'];
    }

    /**
     * Sets callDuration
     *
     * @param int $callDuration The callDuration.
     *
     * @return $this
     */
    public function setCallDuration($callDuration)
    {
        $this->container['callDuration'] = $callDuration;

        return $this;
    }

    /**
     * Gets ringDuration
     *
     * @return int
     */
    public function getRingDuration()
    {
        return $this->container['ringDuration'];
    }

    /**
     * Sets ringDuration
     *
     * @param int $ringDuration The ringDuration.
     *
     * @return $this
     */
    public function setRingDuration($ringDuration)
    {
        $this->container['ringDuration'] = $ringDuration;

        return $this;
    }

    /**
     * Gets talkDuration
     *
     * @return int
     */
    public function getTalkDuration()
    {
        return $this->container['talkDuration'];
    }

    /**
     * Sets talkDuration
     *
     * @param int $talkDuration The talkDuration.
     *
     * @return $this
     */
    public function setTalkDuration($talkDuration)
    {
        $this->container['talkDuration'] = $talkDuration;

        return $this;
    }

    /**
     * Gets calledNumber
     *
     * @return string
     */
    public function getCalledNumber()
    {
        return $this->container['calledNumber'];
    }

    /**
     * Sets calledNumber
     *
     * @param string $calledNumber The talkDuration.
     *
     * @return $this
     */
    public function setCalledNumber($calledNumber)
    {
        $this->container['calledNumber'] = $calledNumber;

        return $this;
    }

    /**
     * Gets callerNumber
     *
     * @return string
     */
    public function getCallerNumber()
    {
        return $this->container['callerNumber'];
    }

    /**
     * Sets callerNumber
     *
     * @param string $callerNumber The callerNumber.
     *
     * @return $this
     */
    public function setCallerNumber($callerNumber)
    {
        $this->container['callerNumber'] = $callerNumber;

        return $this;
    }

    /**
     * Gets redirectionNumber
     *
     * @return string
     */
    public function getRedirectionNumber()
    {
        return $this->container['redirectionNumber'];
    }

    /**
     * Sets redirectionNumber
     *
     * @param string $redirectionNumber The redirectionNumber.
     *
     * @return $this
     */
    public function setRedirectionNumber($redirectionNumber)
    {
        $this->container['redirectionNumber'] = $redirectionNumber;

        return $this;
    }

    /**
     * Gets termination
     *
     * @return string
     */
    public function getTermination()
    {
        return $this->container['termination'];
    }

    /**
     * Sets termination
     *
     * @param string $termination The termination.
     *
     * @return $this
     */
    public function setTermination($termination)
    {
        $this->container['termination'] = $termination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
