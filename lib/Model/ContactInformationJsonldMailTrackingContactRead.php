<?php
/**
 * ContactInformationJsonldMailTrackingContactRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * ContactInformationJsonldMailTrackingContactRead Class Doc Comment
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactInformationJsonldMailTrackingContactRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactInformation.jsonld-mail_tracking_contact.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'OneOfContactInformationJsonldMailTrackingContactReadContext',
        'id' => 'string',
        'type' => 'string',
        'civility' => 'string',
        'firstName' => 'string',
        'name' => 'string',
        'identity' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'postalAddress' => '\Ubiflow\Model\PostalAddressJsonldMailTrackingContactRead',
        'situation' => 'string',
        'society' => 'string',
        'programName' => 'string',
        'additionalInformation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
        'id' => null,
        'type' => null,
        'civility' => null,
        'firstName' => null,
        'name' => null,
        'identity' => null,
        'email' => null,
        'phone' => null,
        'postalAddress' => null,
        'situation' => null,
        'society' => null,
        'programName' => null,
        'additionalInformation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
        'id' => '@id',
        'type' => '@type',
        'civility' => 'civility',
        'firstName' => 'firstName',
        'name' => 'name',
        'identity' => 'identity',
        'email' => 'email',
        'phone' => 'phone',
        'postalAddress' => 'postalAddress',
        'situation' => 'situation',
        'society' => 'society',
        'programName' => 'programName',
        'additionalInformation' => 'additionalInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
        'id' => 'setId',
        'type' => 'setType',
        'civility' => 'setCivility',
        'firstName' => 'setFirstName',
        'name' => 'setName',
        'identity' => 'setIdentity',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'postalAddress' => 'setPostalAddress',
        'situation' => 'setSituation',
        'society' => 'setSociety',
        'programName' => 'setProgramName',
        'additionalInformation' => 'setAdditionalInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
        'id' => 'getId',
        'type' => 'getType',
        'civility' => 'getCivility',
        'firstName' => 'getFirstName',
        'name' => 'getName',
        'identity' => 'getIdentity',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'postalAddress' => 'getPostalAddress',
        'situation' => 'getSituation',
        'society' => 'getSociety',
        'programName' => 'getProgramName',
        'additionalInformation' => 'getAdditionalInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['civility'] = isset($data['civility']) ? $data['civility'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['identity'] = isset($data['identity']) ? $data['identity'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['postalAddress'] = isset($data['postalAddress']) ? $data['postalAddress'] : null;
        $this->container['situation'] = isset($data['situation']) ? $data['situation'] : null;
        $this->container['society'] = isset($data['society']) ? $data['society'] : null;
        $this->container['programName'] = isset($data['programName']) ? $data['programName'] : null;
        $this->container['additionalInformation'] = isset($data['additionalInformation']) ? $data['additionalInformation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return OneOfContactInformationJsonldMailTrackingContactReadContext
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param OneOfContactInformationJsonldMailTrackingContactReadContext $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return string
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param string $civility The civility of the contact, as given by the portal.
     *
     * @return $this
     */
    public function setCivility($civility)
    {
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName The first name of the contact, as given by the portal.
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The last name of the contact, as given by the portal.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return string
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param string $identity The identity of the contact, as given by the portal.
     *
     * @return $this
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email of the contact.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The phone of the contact.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets postalAddress
     *
     * @return \Ubiflow\Model\PostalAddressJsonldMailTrackingContactRead
     */
    public function getPostalAddress()
    {
        return $this->container['postalAddress'];
    }

    /**
     * Sets postalAddress
     *
     * @param \Ubiflow\Model\PostalAddressJsonldMailTrackingContactRead $postalAddress postalAddress
     *
     * @return $this
     */
    public function setPostalAddress($postalAddress)
    {
        $this->container['postalAddress'] = $postalAddress;

        return $this;
    }

    /**
     * Gets situation
     *
     * @return string
     */
    public function getSituation()
    {
        return $this->container['situation'];
    }

    /**
     * Sets situation
     *
     * @param string $situation situation.
     *
     * @return $this
     */
    public function setSituation($situation)
    {
        $this->container['situation'] = $situation;

        return $this;
    }

    /**
     * Gets society
     *
     * @return string
     */
    public function getSociety()
    {
        return $this->container['society'];
    }

    /**
     * Sets society
     *
     * @param string $society societe.
     *
     * @return $this
     */
    public function setSociety($society)
    {
        $this->container['society'] = $society;

        return $this;
    }

    /**
     * Gets programName
     *
     * @return string
     */
    public function getProgramName()
    {
        return $this->container['programName'];
    }

    /**
     * Sets programName
     *
     * @param string $programName PROGRAMME_NOM.
     *
     * @return $this
     */
    public function setProgramName($programName)
    {
        $this->container['programName'] = $programName;

        return $this;
    }

    /**
     * Gets additionalInformation
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     *
     * @param string $additionalInformation INFORMATIONS_COMPLEMENTAIRES
     *
     * @return $this
     */
    public function setAdditionalInformation($additionalInformation)
    {
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
