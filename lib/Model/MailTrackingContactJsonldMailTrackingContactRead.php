<?php
/**
 * MailTrackingContactJsonldMailTrackingContactRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * MailTrackingContactJsonldMailTrackingContactRead Class Doc Comment
 *
 * @category Class
 * @description It&#x27;s a lead. A person interested by an ad he saw on a portal and that wants to be contacted by the advertiser.
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailTrackingContactJsonldMailTrackingContactRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailTrackingContact.jsonld-mail_tracking_contact.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'context' => 'OneOfMailTrackingContactJsonldMailTrackingContactReadContext',
        'id' => 'int',
        'portal' => '\Ubiflow\Model\PortalJsonldMailTrackingContactRead',
        'ad' => '\Ubiflow\Model\AdJsonldMailTrackingContactRead',
        'urlOnPortal' => 'string',
        'createdAt' => '\DateTime',
        'sentAt' => '\DateTime',
        'contactInformation' => '\Ubiflow\Model\ContactInformationJsonldMailTrackingContactRead',
        'comment' => 'string',
        'hotLead' => 'bool',
        'scoring' => '',
        'scoringTotal' => '',
        'dataForm' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'context' => null,
        'id' => null,
        'portal' => null,
        'ad' => null,
        'urlOnPortal' => null,
        'createdAt' => 'date-time',
        'sentAt' => 'date-time',
        'contactInformation' => null,
        'comment' => null,
        'hotLead' => null,
        'scoring' => null,
        'scoringTotal' => null,
        'dataForm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => '@id',
        'type' => '@type',
        'context' => '@context',
        'id' => 'id',
        'portal' => 'portal',
        'ad' => 'ad',
        'urlOnPortal' => 'urlOnPortal',
        'createdAt' => 'createdAt',
        'sentAt' => 'sentAt',
        'contactInformation' => 'contactInformation',
        'comment' => 'comment',
        'hotLead' => 'hotLead',
        'scoring' => 'scoring',
        'scoringTotal' => 'scoringTotal',
        'dataForm' => 'dataForm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'context' => 'setContext',
        'id' => 'setId',
        'portal' => 'setPortal',
        'ad' => 'setAd',
        'urlOnPortal' => 'setUrlOnPortal',
        'createdAt' => 'setCreatedAt',
        'sentAt' => 'setSentAt',
        'contactInformation' => 'setContactInformation',
        'comment' => 'setComment',
        'hotLead' => 'setHotLead',
        'scoring' => 'setScoring',
        'scoringTotal' => 'setScoringTotal',
        'dataForm' => 'setDataForm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'context' => 'getContext',
        'id' => 'getId',
        'portal' => 'getPortal',
        'ad' => 'getAd',
        'urlOnPortal' => 'getUrlOnPortal',
        'createdAt' => 'getCreatedAt',
        'sentAt' => 'getSentAt',
        'contactInformation' => 'getContactInformation',
        'comment' => 'getComment',
        'hotLead' => 'getHotLead',
        'scoring' => 'getScoring',
        'scoringTotal' => 'getScoringTotal',
        'dataForm' => 'getDataForm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['portal'] = isset($data['portal']) ? $data['portal'] : null;
        $this->container['ad'] = isset($data['ad']) ? $data['ad'] : null;
        $this->container['urlOnPortal'] = isset($data['urlOnPortal']) ? $data['urlOnPortal'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['sentAt'] = isset($data['sentAt']) ? $data['sentAt'] : null;
        $this->container['contactInformation'] = isset($data['contactInformation']) ? $data['contactInformation'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['hotLead'] = isset($data['hotLead']) ? $data['hotLead'] : null;
        $this->container['scoring'] = isset($data['scoring']) ? $data['scoring'] : null;
        $this->container['scoringTotal'] = isset($data['scoringTotal']) ? $data['scoringTotal'] : null;
        $this->container['dataForm'] = isset($data['dataForm']) ? $data['dataForm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets context
     *
     * @return OneOfMailTrackingContactJsonldMailTrackingContactReadContext
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param OneOfMailTrackingContactJsonldMailTrackingContactReadContext $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the contact, in the Ubiflow IS.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets portal
     *
     * @return \Ubiflow\Model\PortalJsonldMailTrackingContactRead
     */
    public function getPortal()
    {
        return $this->container['portal'];
    }

    /**
     * Sets portal
     *
     * @param \Ubiflow\Model\PortalJsonldMailTrackingContactRead $portal portal
     *
     * @return $this
     */
    public function setPortal($portal)
    {
        $this->container['portal'] = $portal;

        return $this;
    }

    /**
     * Gets ad
     *
     * @return \Ubiflow\Model\AdJsonldMailTrackingContactRead
     */
    public function getAd()
    {
        return $this->container['ad'];
    }

    /**
     * Sets ad
     *
     * @param \Ubiflow\Model\AdJsonldMailTrackingContactRead $ad ad
     *
     * @return $this
     */
    public function setAd($ad)
    {
        $this->container['ad'] = $ad;

        return $this;
    }

    /**
     * Gets urlOnPortal
     *
     * @return string
     */
    public function getUrlOnPortal()
    {
        return $this->container['urlOnPortal'];
    }

    /**
     * Sets urlOnPortal
     *
     * @param string $urlOnPortal The url of the ad on the portal.
     *
     * @return $this
     */
    public function setUrlOnPortal($urlOnPortal)
    {
        $this->container['urlOnPortal'] = $urlOnPortal;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date the contact sent the email on the portal.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets sentAt
     *
     * @return \DateTime
     */
    public function getSentAt()
    {
        return $this->container['sentAt'];
    }

    /**
     * Sets sentAt
     *
     * @param \DateTime $sentAt The date Ubiflow sent the email to the advertiser.  Dates use the <a href=\"https://tools.ietf.org/html/rfc3339#section-5.8\">RFC3339</a> format (ex: 2020-12-16T00:00:00+00).
     *
     * @return $this
     */
    public function setSentAt($sentAt)
    {
        $this->container['sentAt'] = $sentAt;

        return $this;
    }

    /**
     * Gets contactInformation
     *
     * @return \Ubiflow\Model\ContactInformationJsonldMailTrackingContactRead
     */
    public function getContactInformation()
    {
        return $this->container['contactInformation'];
    }

    /**
     * Sets contactInformation
     *
     * @param \Ubiflow\Model\ContactInformationJsonldMailTrackingContactRead $contactInformation contactInformation
     *
     * @return $this
     */
    public function setContactInformation($contactInformation)
    {
        $this->container['contactInformation'] = $contactInformation;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment The comment written by the contact about the ad on the portal.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets hotLead
     *
     * @return bool
     */
    public function getHotLead()
    {
        return $this->container['hotLead'];
    }

    /**
     * Sets hotLead
     *
     * @param bool $hotLead Whether the contact is a hot lead or not.  A lead is hot when he asked himself some information about the ad on the portal.  A lead is not hot when he has been provided by the portal who deduced that this lead COULD be interested by the ad, either because the lead has created on the portal an alert concerning new ads which match some criteria, or because this ad is similar to another ad for which the lead has shown some interest.  By default, the API only returns hot leads when GETting a collection of contacts. Non hot leads may be retrieved thanks to the filter corresponding to this property.
     *
     * @return $this
     */
    public function setHotLead($hotLead)
    {
        $this->container['hotLead'] = $hotLead;

        return $this;
    }

    /**
     * Gets scoring
     *
     * @return 
     */
    public function getScoring()
    {
        return $this->container['scoring'];
    }

    /**
     * Sets scoring
     *
     * @param  $scoring scoring
     *
     * @return $this
     */
    public function setScoring($scoring)
    {
        $this->container['scoring'] = $scoring;

        return $this;
    }

    /**
     * Gets scoringTotal
     *
     * @return 
     */
    public function getScoringTotal()
    {
        return $this->container['scoringTotal'];
    }

    /**
     * Sets scoringTotal
     *
     * @param  $scoringTotal scoringTotal
     *
     * @return $this
     */
    public function setScoringTotal($scoringTotal)
    {
        $this->container['scoringTotal'] = $scoringTotal;

        return $this;
    }

    /**
     * Gets dataForm
     *
     * @return 
     */
    public function getDataForm()
    {
        return $this->container['dataForm'];
    }

    /**
     * Sets dataForm
     *
     * @param  $dataForm dataForm
     *
     * @return $this
     */
    public function setDataForm($dataForm)
    {
        $this->container['dataForm'] = $dataForm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
