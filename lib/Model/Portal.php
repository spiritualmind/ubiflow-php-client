<?php
/**
 * Portal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ubiflow\Model;

use \ArrayAccess;
use \Ubiflow\ObjectSerializer;

/**
 * Portal Class Doc Comment
 *
 * @category Class
 * @description A portal is a web site publishing ads owned by advertisers.
 * @package  Ubiflow
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Portal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Portal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'universeCode' => 'string',
        'universe' => 'string',
        'name' => 'string',
        'active' => 'bool',
        'private' => 'bool',
        'free' => 'bool',
        'url' => 'string',
        'logoUrl' => 'string',
        'multiPublicationCompatible' => 'bool',
        'contactManagerCompatible' => 'bool',
        'externalServiceCode' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'universeCode' => null,
        'universe' => 'iri-reference',
        'name' => null,
        'active' => null,
        'private' => null,
        'free' => null,
        'url' => null,
        'logoUrl' => null,
        'multiPublicationCompatible' => null,
        'contactManagerCompatible' => null,
        'externalServiceCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'universeCode' => 'universeCode',
        'universe' => 'universe',
        'name' => 'name',
        'active' => 'active',
        'private' => 'private',
        'free' => 'free',
        'url' => 'url',
        'logoUrl' => 'logoUrl',
        'multiPublicationCompatible' => 'multiPublicationCompatible',
        'contactManagerCompatible' => 'contactManagerCompatible',
        'externalServiceCode' => 'externalServiceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'universeCode' => 'setUniverseCode',
        'universe' => 'setUniverse',
        'name' => 'setName',
        'active' => 'setActive',
        'private' => 'setPrivate',
        'free' => 'setFree',
        'url' => 'setUrl',
        'logoUrl' => 'setLogoUrl',
        'multiPublicationCompatible' => 'setMultiPublicationCompatible',
        'contactManagerCompatible' => 'setContactManagerCompatible',
        'externalServiceCode' => 'setExternalServiceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'universeCode' => 'getUniverseCode',
        'universe' => 'getUniverse',
        'name' => 'getName',
        'active' => 'getActive',
        'private' => 'getPrivate',
        'free' => 'getFree',
        'url' => 'getUrl',
        'logoUrl' => 'getLogoUrl',
        'multiPublicationCompatible' => 'getMultiPublicationCompatible',
        'contactManagerCompatible' => 'getContactManagerCompatible',
        'externalServiceCode' => 'getExternalServiceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['universeCode'] = isset($data['universeCode']) ? $data['universeCode'] : null;
        $this->container['universe'] = isset($data['universe']) ? $data['universe'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['logoUrl'] = isset($data['logoUrl']) ? $data['logoUrl'] : null;
        $this->container['multiPublicationCompatible'] = isset($data['multiPublicationCompatible']) ? $data['multiPublicationCompatible'] : null;
        $this->container['contactManagerCompatible'] = isset($data['contactManagerCompatible']) ? $data['contactManagerCompatible'] : null;
        $this->container['externalServiceCode'] = isset($data['externalServiceCode']) ? $data['externalServiceCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the portal, in the Ubiflow IS.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The unique code of the portal, in the Ubiflow IS.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets universeCode
     *
     * @return string
     */
    public function getUniverseCode()
    {
        return $this->container['universeCode'];
    }

    /**
     * Sets universeCode
     *
     * @param string $universeCode The identifier (code name) of the universe of the portal.  The identifier is one of the following : - \"IMMO\" : Real estate. - \"VO\" : Vehicles. - \"NAUT\" : Nautical. - \"EMPLOI\" : Jobs.
     *
     * @return $this
     */
    public function setUniverseCode($universeCode)
    {
        $this->container['universeCode'] = $universeCode;

        return $this;
    }

    /**
     * Gets universe
     *
     * @return string
     */
    public function getUniverse()
    {
        return $this->container['universe'];
    }

    /**
     * Sets universe
     *
     * @param string $universe The universe of the portal.
     *
     * @return $this
     */
    public function setUniverse($universe)
    {
        $this->container['universe'] = $universe;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the portal.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates weather the portal is active. Inactive portals are not used anymore.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Indicates weather the portal is a private portal.  A private portal almost always matches the needs of a specific advertiser to publish ads to a specific portal who only display ads from this advertiser : this is typically used when Ubiflow send ads to a web agency who manages the personal web site of an advertiser.  Private portals should NOT be seen by advertisers other than the specific advertiser for whom this portal has been created.
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool $free Indicates weather the portal is free (ie advertisers don't pay to publish ads).
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The url of the main page of the portal.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets logoUrl
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     *
     * @param string $logoUrl The url of the portal's logo.
     *
     * @return $this
     */
    public function setLogoUrl($logoUrl)
    {
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets multiPublicationCompatible
     *
     * @return bool
     */
    public function getMultiPublicationCompatible()
    {
        return $this->container['multiPublicationCompatible'];
    }

    /**
     * Sets multiPublicationCompatible
     *
     * @param bool $multiPublicationCompatible Indicates weather ads may be published by Ubiflow on the portal.
     *
     * @return $this
     */
    public function setMultiPublicationCompatible($multiPublicationCompatible)
    {
        $this->container['multiPublicationCompatible'] = $multiPublicationCompatible;

        return $this;
    }

    /**
     * Gets contactManagerCompatible
     *
     * @return bool
     */
    public function getContactManagerCompatible()
    {
        return $this->container['contactManagerCompatible'];
    }

    /**
     * Sets contactManagerCompatible
     *
     * @param bool $contactManagerCompatible Indicates weather mail-tracking contacts may be managed by Ubiflow for the portal.
     *
     * @return $this
     */
    public function setContactManagerCompatible($contactManagerCompatible)
    {
        $this->container['contactManagerCompatible'] = $contactManagerCompatible;

        return $this;
    }

    /**
     * Gets externalServiceCode
     *
     * @return 
     */
    public function getExternalServiceCode()
    {
        return $this->container['externalServiceCode'];
    }

    /**
     * Sets externalServiceCode
     *
     * @param  $externalServiceCode externalServiceCode
     *
     * @return $this
     */
    public function setExternalServiceCode($externalServiceCode)
    {
        $this->container['externalServiceCode'] = $externalServiceCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
